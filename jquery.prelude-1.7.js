// Generated by CoffeeScript 1.4.0
/*
# jquery.prelude
# Simple preloader plug-in.
#
# Examples and document at http://oame.github.com/jquery.prelude
#
# Copyright(C) 2012 o_ame - http://oameya.com
# version: 1.7
# require: jQuery 1.7.2+
# license: MIT License
*/

(function($) {
  var $prelude, config, displayed_count, displayed_perc, finished_count, now_perc, objects, timer, total_count;
  Array.prototype.remove = function(element) {
    var i, n;
    if ((function() {
      var _i, _len, _results;
      _results = [];
      for (n = _i = 0, _len = this.length; _i < _len; n = ++_i) {
        i = this[n];
        _results.push($(i).data("preload") === element);
      }
      return _results;
    }).call(this)) {
      return this.splice(n, 1);
    }
  };
  $prelude = {
    collect_objects: function(node) {
      var _objects;
      _objects = [];
      $("" + node + " *").each(function() {
        if ($(this).data("preload") != null) {
          return _objects.push(this);
        }
      });
      return _objects;
    },
    sniff_tags: function(node) {
      return $("" + node + " img,audio").each(function() {
        if ($(this).attr("src") != null) {
          return $(this).attr("data-preload", $(this).attr("src"));
        }
      });
    },
    preload_objects: function(_objects, callback) {
      var total;
      total = _objects.length;
      return $(_objects).each(function() {
        var audio, img, src, ua;
        src = $(this).data("preload");
        if (this.tagName === "AUDIO") {
          audio = $("<audio/>").attr("src", src).load();
          return audio.on("canplay canplaythrough", function() {
            _objects.remove(src);
            return callback(total, total - _objects.length);
          });
        } else {
          img = $("<img/>").attr({
            src: src
          });
          ua = $.browser;
          if (ua.msie && img.width() !== 0) {
            _objects.remove(src);
            return callback(total, total - _objects.length);
          } else {
            return img.load(function() {
              _objects.remove(src);
              return callback(total, total - _objects.length);
            });
          }
        }
      });
    },
    replace_objects_to_appear: function(_objects) {
      return $(_objects).each(function() {
        switch (this.tagName) {
          case "IMG":
            return $(this).attr({
              src: $(this).data("preload")
            });
          case "AUDIO":
            return $(this).attr({
              src: $(this).data("preload")
            });
          default:
            return $(this).css({
              "background-image": "url( " + ($(this).data("preload")) + " )"
            });
        }
      });
    },
    auto_prepare_assets: function(node) {
      var slider, text_layer, wrapper;
      wrapper = $("<div/>").attr("id", "prelude-wrapper");
      slider = $("<div/>").attr("id", "prelude-slider");
      slider.append($("<span/>"));
      if (config.show_text) {
        text_layer = $("<div/>").attr({
          id: "prelude-text-layout"
        });
        text_layer.append($("<p/>").attr("id", "prelude-text"));
        wrapper.append(text_layer);
      }
      wrapper.append(slider);
      return $(node).prepend(wrapper);
    },
    stat_log: function(tag) {
      return console.log("[" + tag + "] displayed_count: " + displayed_count + " finished_count: " + finished_count + " total_count: " + total_count + " now_perc: " + now_perc + " displayed_perc: " + displayed_perc);
    }
  };
  timer = null;
  objects = [];
  now_perc = 0;
  displayed_perc = 0;
  total_count = 0;
  finished_count = 0;
  displayed_count = 0;
  config = {
    smart_preload: true,
    auto_add_source: true,
    auto_prepare_assets: true,
    auto_hide: true,
    hide_speed: 1000,
    show_text: true,
    loading_text: ":percentage %",
    animation: {
      interval: 20,
      speed: 1000
    }
  };
  return $.fn.prelude = function(options) {
    var animated;
    if (options == null) {
      options = {};
    }
    config.top_node = $(this).selector;
    config.html = {};
    config.html.wrapper = "" + config.top_node + " > #prelude-wrapper";
    config.html.slider = "" + config.html.wrapper + " > #prelude-slider";
    config.html.indicator = "" + config.html.slider + " > span";
    config.html.text_node = "" + config.html.wrapper + " > #prelude-text-layout > #prelude-text";
    config.html.insersion = ":percentage";
    config = jQuery.extend(config, options);
    if (config.smart_preload === true) {
      $prelude.sniff_tags(config.top_node);
    }
    if (config.auto_prepare_assets === true) {
      $prelude.auto_prepare_assets(config.top_node);
    }
    objects = $prelude.collect_objects(config.top_node);
    total_count = objects.length;
    $prelude.preload_objects($.extend(true, [], objects), function(_total, _loaded) {
      now_perc = Math.ceil(100 * _loaded / _total);
      return finished_count += 1;
    });
    animated = true;
    return timer = window.setInterval(function() {
      var now_x, top_x;
      if (total_count <= displayed_count && animated === false) {
        window.clearInterval(timer);
        if (config.auto_add_source === true) {
          $prelude.replace_objects_to_appear(objects);
        }
        if (config.auto_hide) {
          return $(config.html.wrapper).fadeOut(config.hide_speed, function() {
            return $(config.top_node).trigger("preloaded");
          });
        } else {
          return $(config.top_node).trigger("preloaded");
        }
      } else {
        top_x = parseInt($(config.html.slider).css("width"));
        now_x = parseInt($(config.html.indicator).css("width"));
        displayed_perc = Math.ceil(now_x / top_x * 100);
        $(config.top_node).trigger("preload_progress", [displayed_perc, finished_count, total_count]);
        if (config.show_text === true) {
          $(config.html.text_node).html(config.loading_text.replace(config.html.insersion, displayed_perc));
        }
        if (displayed_count < finished_count) {
          animated = true;
          displayed_count += 1;
          $(config.html.indicator).stop();
          return $(config.html.indicator).animate({
            width: (displayed_count / total_count) * 100 + "%"
          }, config.speed, function() {
            return animated = false;
          });
        }
      }
    }, config.interval);
  };
})(jQuery);
